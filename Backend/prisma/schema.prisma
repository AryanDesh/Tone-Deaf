// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username   String   @default("")
  password   String
  email      String   @unique
  playlists  Playlist[]
  streamLogs StreamLog[]
  likedId    Int?
  following Friendship[] @relation("Following") 
  followers Friendship[] @relation("Follower")
  rooms     UserInRoom[]

  host     Room[]
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model Friendship {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  followingId    String   @db.Uuid
  followerId   String   @db.Uuid
  following      User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  follower      User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  status     FriendshipStatus @default(PENDING)
  created_at DateTime @default(now())
  @@unique([followingId, followerId])
  @@index([followingId])
  @@index([followerId])
}



model Song {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  artist    String
  album     String?
  duration  Int?
  tags      TagsOnSongs[]
  streamLog StreamLog[]
  PlaylistSong PlaylistSong[]
  @@unique([title , artist])
}

model Tag {
  id        Int        @id @default(autoincrement())
  tag       String     @unique
  Song      TagsOnSongs[] 
}

model TagsOnSongs {
  songId  String  @db.Uuid
  song    Song  @relation(fields: [songId], references: [id], onDelete: Cascade)
  tagId   Int
  tag     Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([songId, tagId])
}

model Playlist {
  id     Int        @id @default(autoincrement())
  name   String
  userId String  @db.Uuid
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade) 
  shared Boolean @default(false)
  playlistSong PlaylistSong[]
  sharedPlaylist  SharedPlaylist?
}

model PlaylistSong {
  playlistId Int
  songId String @db.Uuid
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song   Song @relation(fields: [songId], references: [id])
  @@id([playlistId, songId]) 
}

model StreamLog {
  id        Int      @id @default(autoincrement())
  userId    String  @db.Uuid
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  songId    String  @db.Uuid
  song      Song     @relation(fields: [songId], references: [id])
  streamedAt DateTime @default(now())
}

model UserInRoom {
  id        Int      @id @default(autoincrement())
  roomId    String   @db.Uuid
  userId    String   @db.Uuid
  joinedAt  DateTime @default(now())

  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([roomId, userId])
}

model Room {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  socketId   String @unique
  hostId    String @db.Uuid
  host      User  @relation(fields: [hostId], references: [id])
  users     UserInRoom[]
  sharedPlaylist  SharedPlaylist[]
}

model SharedPlaylist{
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomId    String @db.Uuid
  room      Room @relation(fields: [roomId], references: [id])
  playlistId  Int @unique
  playlist    Playlist  @relation(fields: [playlistId], references: [id])
}