// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Metadata {
  id        Int      @id @default(autoincrement())
  title     String
  artist    String
  album     String?
  duration  Int?
  images    String?
  tags      String[] // Prisma supports arrays for databases that allow it
  songId    Int      @unique
  song      Songs    @relation(fields: [songId], references: [id]) // Relates to Songs
  PlaylistSong PlaylistSong[]

  Playlist Playlist[] @relation("PlaylistSongs")
}

model Songs {
  id        Int      @id @default(autoincrement())
  songId    String   @unique // Represents the unique song identifier
  mp3       String   // Assume this will store the path or URL to the mp3
  metadata  Metadata? @relation // One-to-one relationship to Metadata
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  password  String     // Assuming the hashed password is stored as a string
  email     String     @unique
  playlists Playlist[] // One-to-many relationship with Playlist
  likedId   Int?       
}

model Playlist {
  id     Int        @id @default(autoincrement())
  name   String
  user   User       @relation(fields: [userId], references: [id]) // Relates to User
  userId Int
  songs  Metadata[] @relation("PlaylistSongs") // Many-to-many relationship with Metadata
  PlaylistSong PlaylistSong[]
}

/// Many-to-many relation table between Playlist and Metadata
model PlaylistSong {
  playlistId Int
  metadataId Int
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  metadata   Metadata @relation(fields: [metadataId], references: [id])

  @@id([playlistId, metadataId]) // Composite primary key for many-to-many relationships
}

