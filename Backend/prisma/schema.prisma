// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  password  String     
  email     String     @unique
  playlists Playlist[] 
  streamLogs StreamLog[]
  likedId   Int?       
}
model Song {
  id        Int      @id @default(autoincrement())
  title     String
  artist    String
  album     String?
  duration  Int?
  images    String?
  fileLoc   String  @unique
  chunked   Boolean @default(false)
  tags      TagsOnSongs[]
  streamLog StreamLog[]
  PlaylistSong PlaylistSong[]
  Playlist Playlist[] @relation("PlaylistSongs")
}

model Tag {
  id        Int        @id @default(autoincrement())
  tag       String     @unique
  Song      TagsOnSongs[] 
}

// Relation Table to showcase m-n relationship between Tag and Song Table.
model TagsOnSongs {
  songId  Int 
  song    Song  @relation(fields: [songId], references: [id])
  tagId   Int
  tag     Tag   @relation(fields: [tagId], references: [id])
  assignedAt DateTime @default(now())

  @@id([songId, tagId])
}

model Playlist {
  id     Int        @id @default(autoincrement())
  name   String
  user   User       @relation(fields: [userId], references: [id]) 
  userId Int
  songs  Song[] @relation("PlaylistSongs") 
  PlaylistSong PlaylistSong[]
}

// Relation Table to showcase m-n relationship between Playlist and Song Table.
model PlaylistSong {
  playlistId Int
  SongId Int
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  Song   Song @relation(fields: [SongId], references: [id])

  @@id([playlistId, SongId]) 
}


model StreamLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  songId    Int
  song      Song     @relation(fields: [songId], references: [id])
  streamedAt DateTime @default(now())
  ipAddress String?
}
